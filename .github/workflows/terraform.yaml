name: Terraform Dev Pipeline

on:
  pull_request:
    branches: [ development ]
  push:
    branches: [ development ]

env:
  TF_VERSION: 1.5.0
  AWS_REGION: eu-west-1

jobs:

  fmt:
    name: Terraform Format Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
    - name: Run terraform fmt
      run: terraform fmt -check -recursive

  validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
    - name: Terraform Init & Validate
      run: |
        terraform -chdir=envs/dev init -backend=false
        terraform -chdir=envs/dev validate

  lint:
    name: Terraform Lint
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v3
    - uses: terraform-linters/setup-tflint@v4
    - run: |
        cd envs/dev
        tflint --init
        tflint

  security:
    name: TFSec Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: aquasecurity/tfsec-action@v1.0.0
      with:
        working_directory: envs/dev

  cost:
    name: Infracost
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: infracost/actions/setup@v2
      with:
        api-key: ${{ secrets.INFRACOST_API_KEY }}
    - run: |
        infracost breakdown --path=envs/dev --format=table

  plan:
    name: Terraform Plan (DEV)
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      id-token: write
      contents: read
    steps:
    - uses: actions/checkout@v3
    - uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_DEV }}
        aws-region: ${{ env.AWS_REGION }}
    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
    - run: terraform init -reconfigure
      working-directory: envs/dev
    - run: terraform plan -no-color
      working-directory: envs/dev

  terratest:
    name: TerraTest
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-go@v4
      with:
        go-version: 1.20

    - name: Run TerraTest for each module with test.go
      run: |
        find envs/dev -type f -path "*/terratest/test.go" | while read file; do
          test_dir=$(dirname "$file")
          echo "üîç Running TerraTest in $test_dir"
          cd "$test_dir"

          # Cria go.mod e instala depend√™ncias se ainda n√£o existir
          if [ ! -f "go.mod" ]; then
            echo "üß± Criando go.mod em $test_dir"
            go mod init terratest_auto
            go get github.com/gruntwork-io/terratest/modules/terraform
            go get github.com/stretchr/testify/assert
          fi

          go test -v ./...

          cd -
        done

  apply:
    name: Terraform Apply (DEV)
    runs-on: ubuntu-latest
    needs: [ plan ]
    if: github.event_name != 'pull_request'
    permissions:
      id-token: write
      contents: read
    steps:
    - uses: actions/checkout@v3
    - uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_DEV }}
        aws-region: ${{ env.AWS_REGION }}
    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
    - run: terraform init -reconfigure
      working-directory: envs/dev
    - run: terraform apply -auto-approve
      working-directory: envs/dev
