name: Terraform Dev Pipeline

on:
  pull_request:
    branches: [ development ]
  push:
    branches: [ development ]

env:
  TF_VERSION: 1.5.0
  AWS_REGION: eu-west-1

jobs:

  fmt:
    name: Terraform Format Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
    - name: Run terraform fmt
      run: terraform fmt -check -recursive

  validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
    - name: Terraform Init & Validate
      run: |
        terraform -chdir=envs/dev init -backend=false
        terraform -chdir=envs/dev validate

  lint:
    name: Terraform Lint
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v3
    - uses: terraform-linters/setup-tflint@v4
    - run: |
        cd envs/dev
        tflint --init
        tflint

  security:
    name: TFSec Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: aquasecurity/tfsec-action@v1.0.0
      with:
        working_directory: envs/dev

  cost:
    name: Infracost
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: infracost/actions/setup@v2
      with:
        api-key: ${{ secrets.INFRACOST_API_KEY }}
    - run: |
        infracost breakdown --path=envs/dev --format=table

  plan:
    name: Terraform Plan (DEV)
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      id-token: write
      contents: read
    outputs:
      has_changes: ${{ steps.detect_dirs.outputs.has_changes }}
      changed_dirs: ${{ steps.detect_dirs.outputs.changed_dirs }}
    steps:
    - uses: actions/checkout@v3
    - uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_DEV }}
        aws-region: ${{ env.AWS_REGION }}
    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
    - name: Fetch full git history
      run: git fetch --no-tags --prune --unshallow || true
    - name: Detect changed Terraform directories
      id: detect_dirs
      run: |
        echo "🔍 Detectando alterações desde o commit anterior"
        changed=$(git diff --name-only HEAD~1 HEAD | grep '^envs/.*/.*/.*\.tf$' | cut -d/ -f1-3 | sort -u | tr '\n' ' ')
        echo "🧪 Arquivos modificados detectados: $changed"
        echo "changed_dirs=$changed" >> $GITHUB_OUTPUT
        if [ -n "$changed" ]; then
          echo "has_changes=true" >> $GITHUB_OUTPUT
        else
          echo "has_changes=false" >> $GITHUB_OUTPUT
        fi
    - name: Run Terraform Plan for changed modules
      if: ${{ steps.detect_dirs.outputs.has_changes == 'true' }}
      run: |
        for dir in ${{ steps.detect_dirs.outputs.changed_dirs }}; do
          echo "📁 Rodando terraform plan em: $dir"
          terraform -chdir="$dir" init -backend=true -reconfigure
          terraform -chdir="$dir" plan -no-color
        done

  terratest:
    name: TerraTest
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-go@v4
      with:
        go-version: 1.20
    - name: Run TerraTest for each module with test.go
      run: |
        find envs/dev -type f -path "*/tests/test.go" | while read file; do
          test_dir=$(dirname "$file")
          echo "🔍 Running TerraTest in $test_dir"
          cd "$test_dir"

          if [ ! -f "go.mod" ]; then
            echo "🧱 Criando go.mod em $test_dir"
            go mod init terratest_auto
            go get github.com/gruntwork-io/terratest/modules/terraform
            go get github.com/stretchr/testify/assert
          fi

          go test -v ./...
          cd -
        done

  apply:
    name: Terraform Apply (DEV)
    runs-on: ubuntu-latest
    needs: [ plan ]
    if: needs.plan.outputs.has_changes == 'true' && github.event_name != 'pull_request'
    permissions:
      id-token: write
      contents: read
    steps:
    - uses: actions/checkout@v3
    - uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_DEV }}
        aws-region: ${{ env.AWS_REGION }}
    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
    - name: Fetch full git history
      run: git fetch --no-tags --prune --unshallow || true
    - name: Apply Terraform for changed modules
      run: |
        changed="${{ needs.plan.outputs.changed_dirs }}"
        for dir in $changed; do
          echo "🚀 Aplicando mudanças em: $dir"
          terraform -chdir="$dir" init -backend=true -reconfigure
          terraform -chdir="$dir" apply -auto-approve
        done
