name: Terraform Dev Pipeline

on:
  pull_request:
    branches: [ development ]
  push:
    branches: [ development ]
  workflow_dispatch:
    inputs:
      target_resource:
        description: "Terraform resource to destroy (e.g., aws_s3_bucket.meu_bucket)"
        required: true
        default: "aws_s3_bucket.meu_bucket"

env:
  TF_VERSION: 1.5.0
  AWS_REGION: us-east-1

jobs:

  fmt:
    name: Terraform Format Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
    - name: Run terraform fmt
      run: terraform fmt -check -diff -recursive

  validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
    - name: Terraform Init & Validate
      run: |
        terraform -chdir=envs/dev init -backend=false
        terraform -chdir=envs/dev validate

  lint:
    name: Terraform Lint
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v3
    - uses: terraform-linters/setup-tflint@v4
    - run: |
        cd envs/dev
        tflint --init
        tflint

  security:
    name: TFSec Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: aquasecurity/tfsec-action@v1.0.0
      with:
        working_directory: envs/dev

  cost:
    name: Infracost
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: infracost/actions/setup@v2
      with:
        api-key: ${{ secrets.INFRACOST_API_KEY }}
    - run: |
        infracost breakdown --path=envs/dev --format=table

  plan:
    name: Terraform Plan (DEV)
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      id-token: write
      contents: read
    outputs:
      destroy_detected: ${{ steps.check_destroy.outputs.destroy_found }}
    steps:
    - uses: actions/checkout@v3
    - uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_DEV }}
        aws-region: ${{ env.AWS_REGION }}
    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
    - run: terraform init -reconfigure
      working-directory: envs/dev
    - name: Terraform Plan with Output Capture
      id: plan
      run: |
        terraform plan -no-color -out=tfplan.txt > plan_output.txt
      working-directory: envs/dev
    - name: Check for destroy operations
      id: check_destroy
      run: |
        if grep -q "^-" envs/dev/plan_output.txt; then
          echo "Destroy operation detected."
          echo "destroy_found=true" >> $GITHUB_OUTPUT
        else
          echo "No destroy operations."
          echo "destroy_found=false" >> $GITHUB_OUTPUT
        fi

  terratest:
    name: TerraTest
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-go@v4
      with:
        go-version: 1.20
    - run: |
        cd tests
        go test -v ./...

  apply:
    name: Terraform Apply (DEV)
    concurrency:
      group: tf-apply-dev
      cancel-in-progress: false
    runs-on: ubuntu-latest
    needs: [ plan ]
    if: needs.plan.outputs.destroy_detected == 'false' && github.event_name != 'pull_request'
    permissions:
      id-token: write
      contents: read
    steps:
    - uses: actions/checkout@v3
    - uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_DEV }}
        aws-region: ${{ env.AWS_REGION }}
    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
    - run: terraform apply -auto-approve tfplan.txt
      working-directory: envs/dev

  destroy:
    name: Terraform Destroy (specific resource)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    permissions:
      id-token: write
      contents: read
    steps:
    - uses: actions/checkout@v3
    - uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_DEV }}
        aws-region: ${{ env.AWS_REGION }}
    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
    - run: terraform init -reconfigure
      working-directory: envs/dev
    - name: Destroy specific resource
      run: terraform destroy -target=${{ github.event.inputs.target_resource }} -auto-approve
      working-directory: envs/dev
